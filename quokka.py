# -*- coding: utf-8 -*-

import asyncio
import os
import logging
import sqlite3
import datetime
import random

from telethon import TelegramClient, errors
from telethon.tl.types import Dialog
from typing import Optional, List

from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils import executor

# --- –û–°–ù–û–í–ù–´–ï –ù–ê–°–¢–†–û–ô–ö–ò ---
API_ID = 29921368
API_HASH = '27c77fb9c9d274e6d81fe25766147631'
SESSION_NAME = 'Watermelon'

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# --- –ö–õ–ò–ï–ù–¢ TELEGRAM ---
client = TelegramClient(SESSION_NAME, API_ID, API_HASH)

async def sending_loop(entity, interval: int, message: str):
    """
    –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –æ–¥–Ω—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –≥—Ä—É–ø–ø—É.
    –¢–µ–ø–µ—Ä—å –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –æ–±—ä–µ–∫—Ç entity –Ω–∞–ø—Ä—è–º—É—é, –∞ –Ω–µ –µ–≥–æ –∏–º—è.
    """
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –¥–ª—è –ª–æ–≥–æ–≤
    group_title = getattr(entity, 'title', f"ID: {entity.id}")
    logger.info(f"–ó–∞–ø—É—â–µ–Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∞ –¥–ª—è –≥—Ä—É–ø–ø—ã '{group_title}' —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º {interval} —Å–µ–∫.")
    
    while True:
        try:
            await client.send_message(entity, message)
            logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø—É '{group_title}'.")
            await asyncio.sleep(interval)
        except errors.FloodWaitError as e:
            logger.warning(f"–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –≥—Ä—É–ø–ø—ã '{group_title}'. –ñ–¥–µ–º {e.seconds} —Å–µ–∫—É–Ω–¥.")
            await asyncio.sleep(e.seconds)
        except errors.UserIsBlockedError:
            logger.error(f"–ë–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –≤ –≥—Ä—É–ø–ø–µ '{group_title}'. –†–∞—Å—Å—ã–ª–∫–∞ –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
            break
        except Exception as e:
            logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è –≥—Ä—É–ø–ø—ã '{group_title}': {e}")
            logger.info("–ü–æ–ø—Ä–æ–±—É—é —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ 60 —Å–µ–∫—É–Ω–¥...")
            await asyncio.sleep(60)

async def select_group_from_dialogs() -> Optional[Dialog]:
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∏–∞–ª–æ–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –≤—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø/–∫–∞–Ω–∞–ª–æ–≤ –∏
    –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤—ã–±—Ä–∞—Ç—å –æ–¥–∏–Ω –∏–∑ –Ω–∏—Ö –ø–æ –Ω–æ–º–µ—Ä—É.
    """
    print("\n–ó–∞–≥—Ä—É–∂–∞—é —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö —á–∞—Ç–æ–≤...")
    dialogs = await client.get_dialogs()
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ –≥—Ä—É–ø–ø—ã –∏ –∫–∞–Ω–∞–ª—ã
    groups_and_channels: List[Dialog] = [d for d in dialogs if d.is_group or d.is_channel]
    
    if not groups_and_channels:
        print("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø—ã –∏–ª–∏ –∫–∞–Ω–∞–ª–∞ –≤ –≤–∞—à–µ–º –∞–∫–∫–∞—É–Ω—Ç–µ.")
        return None
        
    print("–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É/–∫–∞–Ω–∞–ª –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏, –≤–≤–µ–¥—è –µ–µ –Ω–æ–º–µ—Ä:")
    for i, dialog in enumerate(groups_and_channels):
        print(f"  {i + 1}. {dialog.title}")
        
    while True:
        try:
            choice_str = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä: ")
            choice = int(choice_str) - 1
            if 0 <= choice < len(groups_and_channels):
                return groups_and_channels[choice]
            else:
                print("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞.")
        except ValueError:
            print("–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")

def get_multiline_message() -> str:
    """
    –ß–∏—Ç–∞–µ—Ç –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ —Ç–µ—Ö –ø–æ—Ä,
    –ø–æ–∫–∞ –Ω–µ –±—É–¥–µ—Ç –≤–≤–µ–¥–µ–Ω–æ —Å–ª–æ–≤–æ '–°–¢–û–ü' –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ.
    """
    print("\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–±–∑–∞—Ü–∞ –Ω–∞–∂–º–∏—Ç–µ Enter.")
    print("–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –Ω–∞–ø–∏—à–∏—Ç–µ –°–¢–û–ü –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ –∏ –Ω–∞–∂–º–∏—Ç–µ Enter.")
    
    lines = []
    while True:
        line = input()
        if line.strip().upper() == '–°–¢–û–ü':
            break
        lines.append(line)
    
    return "\n".join(lines)

async def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: —Å–æ–±–∏—Ä–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç —Ä–∞—Å—Å—ã–ª–∫—É.
    """
    print("--- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø—ã Telegram ---")
    await client.start()
    
    group_configs = []
    
    while True:
        selected_dialog = await select_group_from_dialogs()
        if not selected_dialog:
            break
        
        group_title = selected_dialog.title

        while True:
            try:
                interval_str = input(f"–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ —Å–µ–∫—É–Ω–¥–∞—Ö –¥–ª—è –≥—Ä—É–ø–ø—ã '{group_title}': ")
                interval = int(interval_str)
                if interval > 0:
                    break
                else:
                    print("–ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è.")
            except ValueError:
                print("–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞.")
        
        message = get_multiline_message()
        if not message.strip():
            logger.warning("–í—ã –≤–≤–µ–ª–∏ –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ì—Ä—É–ø–ø–∞ –±—É–¥–µ—Ç –ø—Ä–æ–ø—É—â–µ–Ω–∞.")
        else:
            group_configs.append({"entity": selected_dialog.entity, "interval": interval, "message": message})
            logger.info(f"–ì—Ä—É–ø–ø–∞ '{group_title}' –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É.")

        add_another = input("\n–î–æ–±–∞–≤–∏—Ç—å –µ—â–µ –æ–¥–Ω—É –≥—Ä—É–ø–ø—É –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏? (y/n): ").strip().lower()
        if add_another != 'y':
            break

    if not group_configs:
        logger.info("–ù–µ—Ç –≥—Ä—É–ø–ø –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.")
        return

    print("-" * 30)
    logger.info("–ó–∞–ø—É—Å–∫–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...")

    tasks = [
        asyncio.create_task(sending_loop(config['entity'], config['interval'], config['message']))
        for config in group_configs
    ]
    
    await asyncio.gather(*tasks)

if __name__ == "__main__":
    try:
        with client:
            client.loop.run_until_complete(main())
    except (KeyboardInterrupt, SystemExit):
        logger.info("\n–ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
    finally:
        logger.info("–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç Telegram...")
        
# –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ë–î, –µ—Å–ª–∏ –µ—Å—Ç—å
db_filename = 'quokka_shop.db'
if os.path.exists(db_filename):
    os.remove(db_filename)

API_TOKEN = "7715331660:AAEs_B2tnLbWjHKwu-Vl8u4oQTP53puOooA"
MODERATORS_CHAT_ID = -1002670384649
CARD_NUMBER = "2200 7013 7750-5745"

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

# --- Database ---
conn = sqlite3.connect(db_filename, check_same_thread=False)
cursor = conn.cursor()

cursor.execute('''
CREATE TABLE IF NOT EXISTS orders (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    order_code TEXT,
    user_id INTEGER,
    product TEXT,
    amount REAL,
    status TEXT,
    timestamp DATETIME,
    payment_name TEXT,
    credentials TEXT,
    subscription_expires DATETIME
)
''')
conn.commit()

class OrderStates(StatesGroup):
    waiting_stars_count = State()
    waiting_payment_name = State()
    waiting_email = State()
    waiting_password = State()
    waiting_account_product = State()
    waiting_account_service = State()
    waiting_account_payname = State()
    waiting_subscription_email = State()

class AdminDeclineStates(StatesGroup):
    waiting_decline_reason = State()

EMOJI_CART = "üõí"
EMOJI_SPOTIFY = "üéµ"
EMOJI_NETFLIX = "üé¨"
EMOJI_ADOBE = "üé®"
EMOJI_TGPREM = "üíé"
EMOJI_CONTACT = "üìû"
EMOJI_ACCOUNT = "üë§"

PRODUCTS = {
    'spotify': [
        {'name': '–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è', 'price': 259, 'pay_url': 'https://pay.cloudtips.ru/p/b676bba2'},
        {'name': '–î—É–æ', 'price': 379, 'pay_url': 'https://pay.cloudtips.ru/p/674add5a'},
        {'name': '–°–µ–º–µ–π–Ω–∞—è', 'price': 479, 'pay_url': 'https://pay.cloudtips.ru/p/00c9504e'}
    ],
    'netflix': [
        {'name': 'Basic', 'price': 499, 'pay_url': 'https://pay.cloudtips.ru/p/6365546b'},
        {'name': 'Standard', 'price': 699, 'pay_url': 'https://pay.cloudtips.ru/p/d62816e5'},
        {'name': 'Premium', 'price': 899, 'pay_url': 'https://pay.cloudtips.ru/p/b4630298'}
    ],
    'adobe': [
        {'name': 'Photoshop', 'price': 2359, 'pay_url': 'https://pay.cloudtips.ru/p/a799827c'},
        {'name': 'After Effects', 'price': 2359, 'pay_url': 'https://pay.cloudtips.ru/p/b4e1fa76'},
        {'name': 'Premiere Pro', 'price': 2359, 'pay_url': 'https://pay.cloudtips.ru/p/4e314e18'}
    ],
    'telegram_premium': [
        {'name': '1 –º–µ—Å—è—Ü', 'price': 259, 'pay_url': 'https://pay.cloudtips.ru/p/6c5c4ea7'},
        {'name': '1 –≥–æ–¥', 'price': 1799, 'pay_url': 'https://pay.cloudtips.ru/p/6c5c4ea7'}
    ]
}

TELEGRAM_STARS = {
    'min': 50,
    'price': 1.8,
    'pay_url': 'https://pay.cloudtips.ru/p/b04d736e'
}

STATUS_ICONS = {
    '–ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ': 'üü°',
    '–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è': 'üü†',
    '–í—ã–ø–æ–ª–Ω–µ–Ω': 'üü¢',
    '–û—Ç–∫–ª–æ–Ω–µ–Ω': '‚ùå'
}

PRODUCT_DESCRIPTIONS = {
    'spotify': {
        '–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è': "üéß –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç —Å –º—É–∑—ã–∫–æ–π –±–µ–∑ —Ä–µ–∫–ª–∞–º—ã, —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Å–∫–∞—á–∏–≤–∞—Ç—å —Ç—Ä–µ–∫–∏ –∏ —Å–ª—É—à–∞—Ç—å –∏—Ö –≤ –ª—é–±–æ–º –ø–æ—Ä—è–¥–∫–µ —Å –≤—ã—Å–æ–∫–∏–º –∫–∞—á–µ—Å—Ç–≤–æ–º –∑–≤—É–∫–∞.\n\n‚ú® –ï—Å–ª–∏ —É –í–∞—Å –Ω–µ—Ç—É –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–∞–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞, —Ç–æ –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –µ–≥–æ, –æ–±—Ä–∞—Ç–∏–≤—à–∏—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É - @quokka_key",
        '–î—É–æ': "üé∂ –î–≤–∞ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö Premium-–∞–∫–∫–∞—É–Ω—Ç–∞, —ç–∫–æ–Ω–æ–º–∏—á–Ω–µ–µ –¥–≤—É—Ö –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫.\n\n‚ú® –ï—Å–ª–∏ —É –í–∞—Å –Ω–µ—Ç—É –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–∞–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞, —Ç–æ –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –µ–≥–æ, –æ–±—Ä–∞—Ç–∏–≤—à–∏—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É - @quokka_key",
        '–°–µ–º–µ–π–Ω–∞—è': "üéº –î–æ —à–µ—Å—Ç–∏ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö Premium-–∞–∫–∫–∞—É–Ω—Ç–æ–≤, —Å —Ä–∞–∑–¥–µ–ª—å–Ω–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–µ–π –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ.\n\n‚ú® –ï—Å–ª–∏ —É –í–∞—Å –Ω–µ—Ç—É –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–∞–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞, —Ç–æ –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç—å –µ–≥–æ, –æ–±—Ä–∞—Ç–∏–≤—à–∏—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É - @quokka_key"
    },
    'netflix': {
        'Basic': "üé¨ –î–æ—Å—Ç—É–ø –∫ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ —Ñ–∏–ª—å–º–æ–≤ –∏ —Å–µ—Ä–∏–∞–ª–æ–≤ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –Ω–∞ –æ–¥–Ω–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ, —á–∞—Å—Ç–æ –≤–∫–ª—é—á–∞–µ—Ç —Ä–µ–∫–ª–∞–º—É –∏ –∫–æ–Ω—Ç–µ–Ω—Ç –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º –∫–∞—á–µ—Å—Ç–≤–µ.\n‚ö†Ô∏è VPN –Ω–µ–æ–±—Ö–æ–¥–∏–º –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞ –≤ –†–æ—Å—Å–∏–∏, –±–µ–∑ –Ω–µ–≥–æ –¥–æ—Å—Ç—É–ø –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω! üö®\n\n‚ú® –ï—Å–ª–∏ —É –í–∞—Å –Ω–µ—Ç—É –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–∞–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞, —Ç–æ –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –µ–≥–æ, –æ–±—Ä–∞—Ç–∏–≤—à–∏—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É - @quokka_key",
        'Standard': "üçø –ü—Ä–æ—Å–º–æ—Ç—Ä –≤ Full HD –∫–∞—á–µ—Å—Ç–≤–µ –Ω–∞ –¥–≤—É—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–¥–Ω–æ–≥–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞.\n‚ö†Ô∏è VPN –Ω–µ–æ–±—Ö–æ–¥–∏–º –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞ –≤ –†–æ—Å—Å–∏–∏, –±–µ–∑ –Ω–µ–≥–æ –¥–æ—Å—Ç—É–ø –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω! üö®\n\n‚ú® –ï—Å–ª–∏ —É –í–∞—Å –Ω–µ—Ç—É –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–∞–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞, —Ç–æ –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –µ–≥–æ, –æ–±—Ä–∞—Ç–∏–≤—à–∏—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É - @quokka_key",
        'Premium': "üé• –ü—Ä–æ—Å–º–æ—Ç—Ä –Ω–∞ —á–µ—Ç—ã—Ä–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –≤ –∫–∞—á–µ—Å—Ç–≤–µ Ultra HD 4K —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–≤—É—Ö –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω—ã–º –∞—É–¥–∏–æ.\n‚ö†Ô∏è VPN –Ω–µ–æ–±—Ö–æ–¥–∏–º –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞ –≤ –†–æ—Å—Å–∏–∏, –±–µ–∑ –Ω–µ–≥–æ –¥–æ—Å—Ç—É–ø –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω! üö®\n\n‚ú® –ï—Å–ª–∏ —É –í–∞—Å –Ω–µ—Ç—É –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–∞–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞, —Ç–æ –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –µ–≥–æ, –æ–±—Ä–∞—Ç–∏–≤—à–∏—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É - @quokka_key"
    },
    'adobe': {
        'Photoshop': "üì∑ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π, —Å–æ–∑–¥–∞–Ω–∏—è –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏–π, –º–∞–∫–µ—Ç–æ–≤ –∏ –ø—Ä–æ—Ç–æ—Ç–∏–ø–æ–≤ –¥–ª—è –≤–µ–±-–¥–∏–∑–∞–π–Ω–∞.\n\n‚ú® –ï—Å–ª–∏ —É –í–∞—Å –Ω–µ—Ç—É –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–∞–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞, —Ç–æ –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –µ–≥–æ, –æ–±—Ä–∞—Ç–∏–≤—à–∏—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É - @quokka_key",
        'After Effects': "‚ú® –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–ø–µ—á–∞—Ç–ª—è—é—â–∏—Ö –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤, –∞–Ω–∏–º–∞—Ü–∏–∏ –∏ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö –∫–æ–º–ø–æ–∑–∏—Ü–∏–π –¥–ª—è —Ñ–∏–ª—å–º–æ–≤, —Ä–µ–∫–ª–∞–º—ã –∏ –≤–µ–±-–ø—Ä–æ–µ–∫—Ç–æ–≤.\n\n‚ú® –ï—Å–ª–∏ —É –í–∞—Å –Ω–µ—Ç—É –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–∞–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞, —Ç–æ –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –µ–≥–æ, –æ–±—Ä–∞—Ç–∏–≤—à–∏—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É - @quokka_key",
        'Premiere Pro': "üéûÔ∏è –ú–æ—â–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –¥–ª—è –º–æ–Ω—Ç–∞–∂–∞ –≤–∏–¥–µ–æ —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –Ω–∞—Ä–µ–∑–∫–∏ –∏ —Å–∫–ª–µ–π–∫–∏ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤, —Ü–≤–µ—Ç–æ–∫–æ—Ä—Ä–µ–∫—Ü–∏–∏ –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å–æ –∑–≤—É–∫–æ–º.\n\n‚ú® –ï—Å–ª–∏ —É –í–∞—Å –Ω–µ—Ç—É –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–∞–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞, —Ç–æ –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –µ–≥–æ, –æ–±—Ä–∞—Ç–∏–≤—à–∏—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É - @quokka_key"
    },
    'telegram_premium': {
        '1 –º–µ—Å—è—Ü': "üåü –ú–µ—Å—è—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –¥–∞—Ä–∏—Ç –º–≥–Ω–æ–≤–µ–Ω–Ω—É—é –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–æ–≤ –∏ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ —Å—Ç–∏–∫–µ—Ä—ã. üöÄ –ù–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å –º–æ–ª–Ω–∏–µ–Ω–æ—Å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–æ–æ–±—â–µ–Ω–∏–π –∏ —è—Ä–∫–∏–º–∏ —Ä–µ–∞–∫—Ü–∏—è–º–∏ –≤ –∫–∞–∂–¥–æ–º —á–∞—Ç–µ!\n\n‚ú® –ï—Å–ª–∏ —É –í–∞—Å –Ω–µ—Çy –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–∞–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞, —Ç–æ –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –µ–≥–æ, –æ–±—Ä–∞—Ç–∏–≤—à–∏—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É - @quokka_key",
        '1 –≥–æ–¥': "‚ú® –ì–æ–¥–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –ø–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä Premium-—Ñ—É–Ω–∫—Ü–∏–π: —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ —ç–º–æ–¥–∑–∏, –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤ –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ—Ñ–∏–ª–µ–π –±–µ–∑ —Ä–µ–∫–ª–∞–º—ã. üéâ –ê –µ—â—ë –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ —Ä–∞–Ω–Ω–∏–π –¥–æ—Å—Ç—É–ø –∫ –Ω–æ–≤—ã–º —Ä–µ–∞–∫—Ü–∏—è–º, —Ç–µ–º–∞–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∏ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º –≤–µ—Å—å –≥–æ–¥!\n\n‚ú® –ï—Å–ª–∏ —É –í–∞—Å –Ω–µ—Çy –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–∞–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞, —Ç–æ –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –µ–≥–æ, –æ–±—Ä–∞—Ç–∏–≤—à–∏—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É - @quokka_key"
    }
}

def is_subscription(product_name: str) -> bool:
    excluded = ["–∑–≤—ë–∑–¥—ã"]
    for ex in excluded:
        if ex in product_name:
            return False
    keywords = ["Spotify", "Netflix", "Adobe", "Telegram"]
    return any(kw in product_name for kw in keywords)

def generate_order_code(order_id: int) -> str:
    rnd = random.randint(1000, 9999)
    return f"ORD{order_id}_{rnd}"

async def has_orders(user_id: int) -> bool:
    cursor.execute("SELECT EXISTS(SELECT 1 FROM orders WHERE user_id=? LIMIT 1)", (user_id,))
    return bool(cursor.fetchone()[0])

async def main_menu(user_id: int) -> types.InlineKeyboardMarkup:
    kb = types.InlineKeyboardMarkup(row_width=2)
    kb.add(
        types.InlineKeyboardButton(f"{EMOJI_SPOTIFY} Spotify", callback_data="category_spotify"),
        types.InlineKeyboardButton(f"{EMOJI_NETFLIX} Netflix", callback_data="category_netflix"),
        types.InlineKeyboardButton(f"{EMOJI_ADOBE} Adobe", callback_data="category_adobe"),
        types.InlineKeyboardButton(f"{EMOJI_TGPREM} Telegram Premium", callback_data="category_telegram_premium")
    )
    if await has_orders(user_id):
        kb.add(types.InlineKeyboardButton("üìù –ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤", callback_data="history"))
    return kb

def back_to_start_kb() -> types.InlineKeyboardMarkup:
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start"))
    return kb

@dp.message_handler(commands=['start'])
async def cmd_start(msg: types.Message):
    photo_url = "https://files.oaiusercontent.com/file-7PH4Tcjfap6LcpnVxS99dp?se=2025-05-18T18%3A19%3A52Z&sp=r&sv=2024-08-04&sr=b&rscc=max-age%3D299%2C%20immutable%2C%20private&rscd=attachment%3B%20filename%3Dphoto_2025-05-18_21-14-27.jpg&sig=GOtpSKbWA4QWY7U9EkIvfzqNnW0IKCfexy4Cmeu106Y%3D"
    caption = (
        "üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –†–∞–¥—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤–∞—Å –≤ –æ–Ω–ª–∞–π–Ω-–º–∞–≥–∞–∑–∏–Ω–µ \"–ö–ª—é—á –ö–≤–æ–∫–∫–∏\"!\n\n"
        "–° –Ω–∞–º–∏ –í—ã —Å–º–æ–∂–µ—Ç–µ:\n"
        "üéµ –ù–∞—Å–ª–∞–∂–¥–∞—Ç—å—Å—è –ª—é–±–∏–º–æ–π –º—É–∑—ã–∫–æ–π –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π\n"
        "üçø –ü–æ–≥—Ä—É–∑–∏—Ç—å—Å—è –≤ –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–∏–µ –º–∏—Ä—ã —Å–µ—Ä–∏–∞–ª–æ–≤ –∏ —Ñ–∏–ª—å–º–æ–≤\n"
        "‚ú® –û—Ç–∫—Ä—ã—Ç—å –≤—Å–µ —Å–∫—Ä—ã—Ç—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–æ–≤\n"
        "üé® –¢–≤–æ—Ä–∏—Ç—å –±–µ–∑ –≥—Ä–∞–Ω–∏—Ü —Å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏\n\n"
    )
    kb = types.InlineKeyboardMarkup(row_width=1)
    kb.add(
        types.InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É üíé", callback_data="choose"),
        types.InlineKeyboardButton("–ù–æ–≤–æ—Å—Ç–Ω–æ–π –∫–∞–Ω–∞–ª üì°", url="https://t.me/key_quokka"),
        types.InlineKeyboardButton("–ü–æ–¥–¥–µ—Ä–∂–∫–∞ ‚òéÔ∏è", url="https://t.me/quokka_key")
        
    )
    await bot.send_photo(msg.chat.id, photo=photo_url, caption=caption, reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data == "start")
async def callback_start(cb: types.CallbackQuery):
    await cb.message.delete()
    main_menu_text = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –í–∞—Å –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–æ–≤:"
    kb = await main_menu(cb.from_user.id)
    await cb.message.answer(main_menu_text, reply_markup=kb)
    await cb.answer()

@dp.callback_query_handler(lambda c: c.data == "choose")
async def choose_subscription(cb: types.CallbackQuery):
    await cb.message.delete()
    main_menu_text = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –í–∞—Å –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–æ–≤:"
    main_menu_kb = await main_menu(cb.from_user.id)
    await cb.message.answer(main_menu_text, reply_markup=main_menu_kb)
    await cb.answer()

@dp.callback_query_handler(lambda c: c.data == 'history')
async def process_history(cb: types.CallbackQuery):
    uid = cb.from_user.id
    cursor.execute(
        "SELECT id, order_code, product, amount, status, timestamp FROM orders WHERE user_id=? ORDER BY timestamp DESC LIMIT 10",
        (uid,)
    )
    rows = cursor.fetchall()
    if not rows:
        await cb.message.answer("–£ –≤–∞—Å –µ—â—ë –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.", reply_markup=back_to_start_kb())
    else:
        kb = types.InlineKeyboardMarkup(row_width=1)
        for oid, order_code, prod, amt, st, ts in rows:
            icon = STATUS_ICONS.get(st, '')
            btn_text = f"#{oid} ({order_code}) {icon} {prod}"
            kb.add(types.InlineKeyboardButton(btn_text, callback_data=f"order_{oid}"))
        kb.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start"))
        await cb.message.answer("üìù –ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤:", reply_markup=kb)
    await cb.answer()

@dp.callback_query_handler(lambda c: c.data.startswith('order_'))
async def order_details(cb: types.CallbackQuery):
    oid = int(cb.data.split('_')[1])
    cursor.execute(
        "SELECT order_code, product, payment_name, status, timestamp, subscription_expires FROM orders WHERE id=?",
        (oid,)
    )
    order = cursor.fetchone()
    if order:
        order_code, prod, pay_name, status, ts, sub_expires = order
        icon = STATUS_ICONS.get(status, '')
        details = f"üì¶ –ó–∞–∫–∞–∑ #{oid} ({order_code})\n"
        details += f"–¢–æ–≤–∞—Ä: {prod}\n"
        details += f"–û–ø–∏—Å–∞–Ω–∏–µ (–∏–º—è –∏–∑ –æ–ø–ª–∞—Ç—ã): {pay_name}\n"
        details += f"–°—Ç–∞—Ç—É—Å: {status} {icon}\n"
        details += f"–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {ts.split('.')[0]}\n\n"
        if sub_expires:
            details += f"–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ: {sub_expires}\n"
            details += "–í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –ø–æ—Å–ª–µ –µ—ë –æ–∫–æ–Ω—á–∞–Ω–∏—è.\n"
        details += "\n–°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π - @quokka_key"
        kb = types.InlineKeyboardMarkup(row_width=2)
        if sub_expires:
            kb.add(types.InlineKeyboardButton("–ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É üòä", callback_data=f"renew_{oid}"))
        kb.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start"))
        await cb.message.edit_text(details, parse_mode="HTML", reply_markup=kb)
    else:
        await cb.message.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=back_to_start_kb())
    await cb.answer()

@dp.callback_query_handler(lambda c: c.data.startswith('category_'))
async def process_category(cb: types.CallbackQuery):
    cat = cb.data.split('_', 1)[1]
    await cb.message.delete()
    if cat in PRODUCTS:
        if cat == "telegram_premium":
            kb = types.InlineKeyboardMarkup(row_width=1)
            kb.add(
                types.InlineKeyboardButton(f"{EMOJI_CART} Telegram Premium 1 –º–µ—Å—è—Ü ‚Äì 259‚ÇΩ", callback_data="product_telegram_premium_0"),
                types.InlineKeyboardButton(f"{EMOJI_CART} Telegram Premium 1 –≥–æ–¥ ‚Äì 1799‚ÇΩ", callback_data="product_telegram_premium_1"),
            )
            kb.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start"))
            await cb.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:", reply_markup=kb)
        elif cat in ("spotify", "netflix", "adobe"):
            kb = types.InlineKeyboardMarkup(row_width=1)
            for i, p in enumerate(PRODUCTS[cat]):
                kb.add(types.InlineKeyboardButton(
                    f"{EMOJI_CART} {cat.capitalize()} {p['name']} ‚Äì {p['price']}‚ÇΩ",
                    callback_data=f"product_{cat}_{i}"
                ))
            kb.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start"))
            await cb.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:", reply_markup=kb)
    await cb.answer()

@dp.callback_query_handler(lambda c: c.data.startswith('product_'))
async def process_product(cb: types.CallbackQuery):
    data_wo_prefix = cb.data[len('product_'):]
    try:
        cat, idx = data_wo_prefix.rsplit('_', 1)
        p = PRODUCTS[cat][int(idx)]
    except Exception:
        await cb.message.answer("–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω–∞—è callback_data.", reply_markup=back_to_start_kb())
        return
    prod_name = p['name']
    if cat == 'telegram_premium':
        title = f"üõí Telegram Premium {prod_name}"
        price_str = f"üí∞ {p['price']}‚ÇΩ"
        description = PRODUCT_DESCRIPTIONS.get(cat, {}).get(prod_name, "")
    else:
        title = f"üõí {cat.capitalize()} {prod_name}"
        price_str = f"üí∞ {p['price']}‚ÇΩ"
        description = PRODUCT_DESCRIPTIONS.get(cat, {}).get(prod_name, "")
    text = (
        f"{title}\n\n"
        f"{description}\n\n"
        f"{price_str}"
    )
    kb = types.InlineKeyboardMarkup(row_width=1)
    kb.add(
        types.InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ üí≥", callback_data=f"proceed_{cat}_{idx}"),
        types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start")
    )
    await cb.message.edit_text(text, reply_markup=kb)
    await cb.answer()

@dp.callback_query_handler(lambda c: c.data.startswith('proceed_'))
async def process_proceed(cb: types.CallbackQuery):
    data_wo_prefix = cb.data[len('proceed_'):]
    try:
        cat, idx = data_wo_prefix.rsplit('_', 1)
        p = PRODUCTS[cat][int(idx)]
    except Exception:
        await cb.message.answer("–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω–∞—è callback_data.", reply_markup=back_to_start_kb())
        return
    if cat == "telegram_premium":
        prod_name = p['name']
        text = (
            f"üõí Telegram Premium {prod_name}\n"
            f"üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å: {p['price']}‚ÇΩ\n\n"
            "üí´ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –æ–ø–ª–∞—Ç–µ üí´\n"
            "1Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ ¬´–û–ø–ª–∞—Ç–∏—Ç—å üí≥¬ª –∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–ª–∞—Ç–µ–∂–∞.\n"
            "2Ô∏è‚É£ –í –ø–æ–ª–µ ¬´–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π*¬ª —É–∫–∞–∂–∏—Ç–µ –≤–∞—à @nickname ‚Äî –º—ã –Ω–µ —Ö—Ä–∞–Ω–∏–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã üõ°Ô∏è \n"
            "3Ô∏è‚É£ –ó–∞–≤–µ—Ä—à–∏—Ç–µ –æ–ø–ª–∞—Ç—É üí∏.\n"
            "4Ô∏è‚É£ –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –±–æ—Ç–∞ ¬´–ö–ª—é—á –ö–≤–æ–∫–∫–∏¬ª –∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–Ø –æ–ø–ª–∞—Ç–∏–ª ‚úÖ¬ª \n"
            "5Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –∏ —Å–ª–µ–¥—É–π—Ç–µ –µ–≥–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º.\n\n"
            "üéâ –ì–æ—Ç–æ–≤–æ! –í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç –∏ —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω! "
        )
        kb = types.InlineKeyboardMarkup(row_width=1)
        kb.add(
            types.InlineKeyboardButton("–û–ø–ª–∞—Ç–∏—Ç—å üí≥", url=p['pay_url']),
            types.InlineKeyboardButton("–Ø –æ–ø–ª–∞—Ç–∏–ª ‚úÖ", callback_data=f"paid_telegram_premium_{idx}"),
            types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start")
        )
        await cb.message.edit_text(text, reply_markup=kb)
    else:
        text = (
            f"üõí {cat.capitalize()} {p['name']}\n"
            f"üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å: {p['price']}‚ÇΩ\n\n"
            "üí´ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –æ–ø–ª–∞—Ç–µ üí´\n"
            "–ö–∞–∫ –æ–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É:\n"
            "1Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"–û–ø–ª–∞—Ç–∏—Ç—å üí≥\" –∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ–ø–ª–∞—Ç—ã\n\n"
            "2Ô∏è‚É£ –ù–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –æ–ø–ª–∞—Ç—ã —É–∫–∞–∂–∏—Ç–µ:\n"
            " –í –ø–æ–ª–µ \"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π*\" - –≤–∞—à—É –ø–æ—á—Ç—É –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∞–∫–∫–∞—É–Ω—Ç üìß\n"
            " –í –ø–æ–ª–µ \"–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å\" - –ø–∞—Ä–æ–ª—å –æ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞ üîê\n"
            " –ú—ã –Ω–µ —Ö—Ä–∞–Ω–∏–º –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã! –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∞ üõ°Ô∏è\n\n"
            "3Ô∏è‚É£ –ó–∞–≤–µ—Ä—à–∏—Ç–µ –æ–ø–ª–∞—Ç—É üí∏\n\n"
            "4Ô∏è‚É£ –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç \"–ö–ª—é—á –ö–≤–æ–∫–∫–∏\" –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"–Ø –æ–ø–ª–∞—Ç–∏–ª ‚úÖ\"\n\n"
            "5Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –µ—â—ë —Ä–∞–∑ –≤–∞—à—É –ø–æ—á—Ç—É –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∞–∫–∫–∞—É–Ω—Ç üì®\n\n"
            "üéâ –ì–æ—Ç–æ–≤–æ! –í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç –∏ —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω! üéâ"
        )
        kb = types.InlineKeyboardMarkup(row_width=1)
        kb.add(
            types.InlineKeyboardButton("–û–ø–ª–∞—Ç–∏—Ç—å üí≥", url=p['pay_url']),
            types.InlineKeyboardButton("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data=f"paid_{cat}_{idx}"),
            types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start")
        )
        await cb.message.edit_text(text, reply_markup=kb)
    await cb.answer()

@dp.callback_query_handler(lambda c: c.data.startswith('paid_telegram_premium_'))
async def process_paid_telegram_premium(cb: types.CallbackQuery):
    data_wo_prefix = cb.data[len('paid_telegram_premium_'):]
    idx = data_wo_prefix
    cat = 'telegram_premium'
    try:
        p = PRODUCTS[cat][int(idx)]
    except Exception:
        await cb.message.answer("–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω–∞—è callback_data.", reply_markup=back_to_start_kb())
        return
    user = cb.from_user
    order_timestamp = datetime.datetime.now()
    days = 30 if idx == "0" else 365
    sub_expires = (order_timestamp + datetime.timedelta(days=days)).strftime('%d.%m.%Y %H:%M:%S')
    prod_name = f"Telegram Premium {p['name']}"
    amt = p['price']
    payment_name = f"@{user.username}" if user.username else f"id{user.id}"
    cursor.execute(
        "INSERT INTO orders(user_id, product, amount, status, timestamp, payment_name, subscription_expires) "
        "VALUES(?,?,?,?,?,?,?)",
        (user.id, prod_name, amt, '–ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ', order_timestamp, payment_name, sub_expires)
    )
    conn.commit()
    oid = cursor.lastrowid
    order_code = generate_order_code(oid)
    cursor.execute("UPDATE orders SET order_code=? WHERE id=?", (order_code, oid))
    conn.commit()
    await cb.message.answer(
        f"‚úÖ –í–∞—à –∑–∞–∫–∞–∑ #{oid} ({order_code}) —Å–æ–∑–¥–∞–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º. \n"
        f"–î–ª—è —Å–≤—è–∑–∏ —Å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —á–∞—Ç: https://t.me/quokka_key\n"
        f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ üìã‚ú®üîë",
        reply_markup=back_to_start_kb()
    )
    kb = types.InlineKeyboardMarkup()
    kb.add(
        types.InlineKeyboardButton("‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data=f"admin_done_{oid}"),
        types.InlineKeyboardButton("‚ùå –í–∞—à –∑–∞–∫–∞–∑ –æ—Ç–∫–ª–æ–Ω–µ–Ω", callback_data=f"admin_decline_{oid}")
    )
    moderator_text = (
        f"üì¶ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{oid} ({order_code})\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.full_name} (@{user.username})\n"
        f"–¢–æ–≤–∞—Ä: Telegram Premium {p['name']}\n–°—É–º–º–∞: {amt}‚ÇΩ\n"
        f"@nickname: @{user.username if user.username else user.id}\n"
        f"–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ: {sub_expires}"
    )
    await bot.send_message(MODERATORS_CHAT_ID, moderator_text, reply_markup=kb)
    await cb.answer()

@dp.callback_query_handler(lambda c: c.data.startswith('paid_') and not c.data.startswith('paid_telegram_premium_'))
async def process_paid_subscription(cb: types.CallbackQuery, state: FSMContext):
    try:
        data_wo_prefix = cb.data[len('paid_'):]
        cat, idx = data_wo_prefix.rsplit('_', 1)
        if cat not in ['spotify', 'netflix', 'adobe']:
            raise ValueError
        p = PRODUCTS[cat][int(idx)]
    except Exception:
        await cb.message.answer("–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω–∞—è callback_data.", reply_markup=back_to_start_kb())
        return

    await cb.message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –ø–æ—á—Ç—É, –∫–æ—Ç–æ—Ä—É—é –≤—ã —É–∫–∞–∑—ã–≤–∞–ª–∏ –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ üìß\n"
        "–ü–æ–∫–∞ –≤—ã –Ω–µ –≤–≤–µ–¥—ë—Ç–µ –ø–æ—á—Ç—É, –∑–∞–∫–∞–∑ –Ω–µ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º üòä"
    )
    await state.update_data(category=cat, idx=idx, product_name=p['name'], price=p['price'])
    await OrderStates.waiting_subscription_email.set()
    await cb.answer()

@dp.message_handler(state=OrderStates.waiting_subscription_email)
async def process_subscription_email(msg: types.Message, state: FSMContext):
    data = await state.get_data()
    user = msg.from_user
    order_timestamp = datetime.datetime.now()
    product_name = f"{data['category'].capitalize()} {data['product_name']}"
    payment_name = f"@{user.username}" if user.username else f"id{user.id}"
    credentials = msg.text

    cursor.execute(
        "INSERT INTO orders(user_id, product, amount, status, timestamp, payment_name, credentials) "
        "VALUES(?,?,?,?,?,?,?)",
        (user.id, product_name, data['price'], '–ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ', order_timestamp, payment_name, credentials)
    )
    conn.commit()
    oid = cursor.lastrowid
    order_code = generate_order_code(oid)
    cursor.execute("UPDATE orders SET order_code=? WHERE id=?", (order_code, oid))
    conn.commit()

    await msg.answer(
        f"‚úÖ –í–∞—à –∑–∞–∫–∞–∑ #{oid} ({order_code}) —Å–æ–∑–¥–∞–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º.\n"
        f"–î–ª—è —Å–≤—è–∑–∏ —Å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —á–∞—Ç: https://t.me/quokka_key\n"
        f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ üìã‚ú®üîë",
        reply_markup=back_to_start_kb()
    )

    kb = types.InlineKeyboardMarkup()
    kb.add(
        types.InlineKeyboardButton("‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data=f"admin_done_{oid}"),
        types.InlineKeyboardButton("‚ùå –í–∞—à –∑–∞–∫–∞–∑ –æ—Ç–∫–ª–æ–Ω–µ–Ω", callback_data=f"admin_decline_{oid}")
    )
    moderator_text = (
        f"üì¶ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{oid} ({order_code})\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.full_name} (@{user.username})\n"
        f"–¢–æ–≤–∞—Ä: {product_name}\n–°—É–º–º–∞: {data['price']}‚ÇΩ\n"
        f"–ü–æ—á—Ç–∞: {credentials}\n"
        f"@nickname: @{user.username if user.username else user.id}"
    )
    await bot.send_message(MODERATORS_CHAT_ID, moderator_text, reply_markup=kb)
    await state.finish()
    
@dp.callback_query_handler(lambda c: c.data.startswith('admin_done_'))
async def admin_done(cb: types.CallbackQuery):
    oid = int(cb.data[len('admin_done_'):])
    cursor.execute("UPDATE orders SET status='–í—ã–ø–æ–ª–Ω–µ–Ω' WHERE id=?", (oid,))
    conn.commit()
    await cb.answer("‚úÖ –ó–∞–∫–∞–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω!")
    await cb.message.edit_text(
        f"{cb.message.text}\n\n–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª—ë–Ω –Ω–∞: ‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω",
        reply_markup=None
    )
    # –ü–æ–ª—É—á–∞–µ–º user_id –∑–∞–∫–∞–∑–∞
    cursor.execute("SELECT user_id FROM orders WHERE id=?", (oid,))
    user_id = cursor.fetchone()[0]
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await bot.send_message(
        user_id,
        "–í–∞—à –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω! üéâ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã ‚Äî –ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É @quokka_key"
    )

@dp.callback_query_handler(lambda c: c.data.startswith('admin_decline_'))
async def admin_decline(cb: types.CallbackQuery, state: FSMContext):
    oid = int(cb.data[len('admin_decline_'):])
    await state.update_data(oid=oid)
    await AdminDeclineStates.waiting_decline_reason.set()
    await cb.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–∞–∑–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
    await cb.answer()

@dp.message_handler(state=AdminDeclineStates.waiting_decline_reason)
async def process_decline_reason(msg: types.Message, state: FSMContext):
    data = await state.get_data()
    oid = data['oid']
    reason = msg.text
    cursor.execute("UPDATE orders SET status='–û—Ç–∫–ª–æ–Ω–µ–Ω' WHERE id=?", (oid,))
    conn.commit()
    # –ü–æ–ª—É—á–∞–µ–º user_id –∑–∞–∫–∞–∑–∞
    cursor.execute("SELECT user_id FROM orders WHERE id=?", (oid,))
    user_id = cursor.fetchone()[0]
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await bot.send_message(
        user_id,
        f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à –∑–∞–∫–∞–∑ –±—ã–ª –æ—Ç–∫–ª–æ–Ω—ë–Ω. –ü—Ä–∏—á–∏–Ω–∞: {reason}\n\n–ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã ‚Äî –ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É @quokka_key"
    )
    await msg.answer("–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–∞–∑–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.", reply_markup=back_to_start_kb())
    await state.finish()

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
